#!/bin/bash

CONFIG="local.properties";
APP="";			# Application name
ENV="production";	# Build environment - production, testing
AUTH="";    		# Auth server
BUILD_VERSION="";	# Build Version
DEBUG="";
CLEAN="";
UPDATE_LOCALES=0;

RCol='\e[0m'    # Text Reset

# Regular          Bold                Underline           High Intensity      BoldHigh Intens
Bla='\e[0;30m';    BBla='\e[1;30m';    UBla='\e[4;30m';    IBla='\e[0;90m';    BIBla='\e[1;90m'; # Black
Red='\e[0;31m';    BRed='\e[1;31m';    URed='\e[4;31m';    IRed='\e[0;91m';    BIRed='\e[1;91m'; # Red
Gre='\e[0;32m';    BGre='\e[1;32m';    UGre='\e[4;32m';    IGre='\e[0;92m';    BIGre='\e[1;92m'; # Green
Yel='\e[0;33m';    BYel='\e[1;33m';    UYel='\e[4;33m';    IYel='\e[0;93m';    BIYel='\e[1;93m'; # Yellow
Blu='\e[0;34m';    BBlu='\e[1;34m';    UBlu='\e[4;34m';    IBlu='\e[0;94m';    BIBlu='\e[1;94m'; # Blue
Pur='\e[0;35m';    BPur='\e[1;35m';    UPur='\e[4;35m';    IPur='\e[0;95m';    BIPur='\e[1;95m'; # Purple
Cya='\e[0;36m';    BCya='\e[1;36m';    UCya='\e[4;36m';    ICya='\e[0;96m';    BICya='\e[1;96m'; # Cyan
Whi='\e[0;37m';    BWhi='\e[1;37m';    UWhi='\e[4;37m';    IWhi='\e[0;97m';    BIWhi='\e[1;97m'; # White

# Background        High Intensity Backgrounds
On_Bla='\e[40m';    On_IBla='\e[0;100m';
On_Red='\e[41m';    On_IRed='\e[0;101m';
On_Gre='\e[42m';    On_IGre='\e[0;102m';
On_Yel='\e[43m';    On_IYel='\e[0;103m';
On_Blu='\e[44m';    On_IBlu='\e[0;104m';
On_Pur='\e[45m';    On_IPur='\e[0;105m';
On_Cya='\e[46m';    On_ICya='\e[0;106m';
On_Whi='\e[47m';    On_IWhi='\e[0;107m';


function usage() {
    echo "Usage: build.sh [OPTION]... APP"
    echo "Builds application APP"
    echo "Options:"
    echo -e "  ${IWhi}-d${RCol}, ${IWhi}--debug${RCol}             Sets log level to higher verbosity"
    echo -e "  ${IWhi}-c${RCol}, ${IWhi}--clean${RCol}             Remove previous build output prior to executing build"
    echo -e "  ${IWhi}-b${RCol}, ${IWhi}--build${RCol}  <version>  Build version"
    echo -e "  ${IWhi}-e${RCol}, ${IWhi}--env${RCol}    <env>      The build environment, either 'testing' or 'production' ($ENV)"
    echo -e "  ${IWhi}-a${RCol}, ${IWhi}--auth${RCol}   <auth>     The auth server ($AUTH)"
    echo -e "  ${IWhi}-l${RCol}, ${IWhi}--locale${RCol}            Update locales before build"
    echo -e "  ${IWhi}-lo${RCol}, ${IWhi}--localeOnly${RCol}       Update locales only, do not build"
    echo ""
    exit
}

function error() {
    echo -e "${BRed}[CRITERION ERR] ${RCol}${1:-"Unknown Error"}" 1>&2
    exit 1
}

function warn() {
    echo -e "${BYel}[CRITERION WARN]${RCol} ${1}"
}

function info() {
    echo -e "${BGre}[CRITERION INF]${RCol} ${1}"
}

function config() {
    if [ "$1" == "" ]; then
        info "Writing config to $CONFIG"
        echo "# This file is generated by build script and should NOT be edited" > $CONFIG
    else
        info "    $1: ${2}"
        echo $1="$2" >> $CONFIG
    fi
}


function gitVersion() {
    if [ -n "$GIT_BRANCH" ] && [ -n "$GIT_COMMIT" ]; then
        info "Getting version from Jenkins"
        BUILD_VERSION=${GIT_BRANCH##*/}'.'${GIT_COMMIT}
    else
        if hash git 2>/dev/null; then
            info "Getting version from git"
            BUILD_VERSION=`git rev-parse --abbrev-ref HEAD`.`git rev-parse HEAD`
        fi
    fi
}

if [ "$1" == "" ]; then
    usage
fi

while [ "$1" != "" ]; do
    case $1 in
    -h | --help)
        usage
    ;;
    -d | --debug)
        DEBUG="-debug"
    ;;
    -c | --clean)
        CLEAN="--clean"
    ;;
    -e | --env)
        shift
        ENV=$1
    ;;
    -a | --api)
        shift
        AUTH=$1
    ;;
    -b | --build)
        shift
        BUILD_VERSION=$1
    ;;
    -l | --locale)
        UPDATE_LOCALES=1
    ;;
    -lo | --localeOnly)
        UPDATE_LOCALES=2
    ;;
    *)
        APP="$1"
        break
    ;;
    esac
    shift
done

ROOT=`realpath ${PWD}/..`
BUILD_DIR=${ROOT}/build          # Build folder
APP_DIR=${PWD}/$APP

info "Build ${IBlu}$APP${RCol} in ${IBlu}$ENV${RCol} mode."
info "PWD=${IBlu}$PWD${RCol}"
info "ENV=${IBlu}$ENV${RCol}"
info "APP=${IBlu}$APP${RCol}"
info "AUTH=${IBlu}$AUTH${RCol}"
info "ROOT=${IBlu}$ROOT${RCol}"
info "BUILD_DIR=${IBlu}$BUILD_DIR${RCol}"
info "APP_DIR=${IBlu}$APP_DIR${RCol}"

if [ "$APP" == "" -o ! -d "${APP_DIR}" ]; then
    error "Invalid app name $APP"
fi

if [ "$UPDATE_LOCALES" != 0 ]; then
    info "Generating json from PO files"
    if hash po2json 2>/dev/null; then
        for file in "$ROOT"/i18n/locale/*.po
        do
          locale=$(basename "$file"); locale="${locale%.*}";
          filename="$APP_DIR/libs/jed/locales/$locale.js";
          info "    Processing locale : $locale"
          po2json -p --fallback-to-msgid -f jed "$file" "$filename"
          sed -i "1s/{/criterion.locales['$locale'] = {/" "$filename"
        done
    else
        error "Can not generate locales as ${Cya}po2json${RCol} tool is not installed."
    fi
fi

if [ "$UPDATE_LOCALES" == 2 ]; then
    exit 1
fi

if [ "$ENV" != "production" -a "$ENV" != "testing" ]; then
    error "Invalid environment"
fi

if [ "$AUTH" == "" ]; then
    warn "Default Auth server isn't set; make sure to manually set it in loader/config.js after build."
fi

cd $APP_DIR;

config
config "app.config.api.auth" "$AUTH"

if [ "$BUILD_VERSION" = "" ]; then
    gitVersion
fi

config "app.config.build" "$BUILD_VERSION"
config "app.output.js" "app-$BUILD_VERSION.js"

cmd="sencha $DEBUG app build --uses $CLEAN $2 $ENV"

info "Building application ${IWhi}$APP${RCol} in ${IWhi}$ENV${RCol} mode."
info "Exec ${IWhi}$cmd${RCol}"

$cmd || exit 1

info "Successfully built $APP"
