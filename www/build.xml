<?xml version="1.0" encoding="utf-8"?>
<project name="ess" default=".help">
    <!--
    The build-impl.xml file imported here contains the guts of the build process. It is
    a great idea to read that file to understand how the process works, but it is best to
    limit your changes to this file.
    -->
    <script language="javascript">
        <![CDATA[
            var dir = project.getProperty("basedir"),
                cmdDir = project.getProperty("cmd.dir"),
                cmdLoaded = project.getReference("senchaloader");
            
            if (!cmdLoaded) {
                function echo(message, file) {
                    var e = project.createTask("echo");
                    e.setMessage(message);
                    if (file) {
                        e.setFile(file);
                    }
                    e.execute();
                };

                if (!cmdDir) {
                    
                    function exec(args) {
                        var process = java.lang.Runtime.getRuntime().exec(args),
                            input = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream())),
                            headerFound = false,
                            line;

                        while (line = input.readLine()) {
                            line = line + '';
                            java.lang.System.out.println(line);
                            if (line.indexOf("Sencha Cmd") > -1) {
                                headerFound = true;
                            }
                            else if (headerFound && !cmdDir) {
                                cmdDir = line;
                                project.setProperty("cmd.dir", cmdDir);
                            }
                        }
                        process.waitFor();
                        return !!cmdDir;
                    }
                    
                    if (!exec(["sencha", "which"])) {
                        var tmpFile = "tmp.sh";
                        echo("source ~/.bash_profile; sencha " + whichArgs.join(" "), tmpFile);
                        exec(["/bin/sh", tmpFile]);
                        new java.io.File(tmpFile)['delete'](); 
                    }
                }
            }

            if (cmdDir && !project.getTargets().containsKey("init-cmd")) {
                var importDir = project.getProperty("build-impl.dir") || 
                                (cmdDir + "/ant/build/app/build-impl.xml");
                var importTask = project.createTask("import");
                
                importTask.setOwningTarget(self.getOwningTarget());
                importTask.setLocation(self.getLocation());
                importTask.setFile(importDir);
                importTask.execute();
            }
        ]]>
    </script>


    <target name="-after-build">
        <!-- Copies api mock files to output dir -->
        <copy todir="${build.dir}/api-mock" overwrite="true">
            <fileset dir="${app.dir}/api-mock"/>
        </copy>

        <!-- Copies index file, config and loader to output dir -->
        <copydir src="${app.dir}/loader" dest="${build.dir}/loader"/>
        <copydir src="${app.dir}/resources" dest="${build.dir}/resources"/>
        <copydir src="${app.dir}/libs" dest="${build.dir}/libs"/>
        <echo file="${build.dir}/loader/version"><![CDATA[${app.config.build}]]></echo>
        <echo file="${build.dir}/loader/config.js"><![CDATA[
/*
 * This file is generated by build script and should NOT be edited.
 * See build.xml for more details.
 */

var criterion = criterion || {},
    LOGIN_MODES = {// >0 (1) for native builds, 2 for GlobalLogin
        web : 0,
        mobile : 1,
        api : 2
    },
    _urls;

criterion.locales = [];

function merge_objects(object1, object2) {
    var ret_object = {};
    for (var attrname in object1) {
        ret_object[attrname] = object1[attrname];
    }
    for (var attrname in object2) {
        ret_object[attrname] = object2[attrname];
    }
    return ret_object;
}

criterion = merge_objects(criterion, {
    PRODUCTION : true,
    BUILD : '${app.config.build}',
    AUTH_URL : '',
    AUTH_URLS : '${app.config.api.auth}',
    DIRECT_AUTH : LOGIN_MODES.web,
    appName : 'ess',
    setAuthUrl : function() {
        try {
            var paramType = typeof criterion.AUTH_URLS;

            if (paramType === "string") {
                _urls = JSON.parse(criterion.AUTH_URLS);
            } else if (paramType === "object") {
                _urls = criterion.AUTH_URLS;
            }

            criterion.AUTH_URL = _urls[document.location.hostname] || _urls['default'];
            delete _urls;
        } catch (e) {
            criterion.AUTH_URL = criterion.AUTH_URLS;
        }
    }
});

criterion.setAuthUrl();

]]></echo>

        <x-compress-js srcfile="${build.dir}/loader/loader.js"/>
        <x-compress-css srcfile="${build.dir}/loader/loader.css"/>
        <x-compress-js srcfile="${build.dir}/libs/jed/jed.js"/>

    </target>

    <target name="-before-native-package">
        <x-echo>===== Native =====</x-echo>
        <copyfile src="${app.dir}/auth.html" dest="${build.dir}/auth.html"/>
        <copyfile src="${app.dir}/index.html" dest="${app.dir}/phonegap/www/index.html"/>
        <copydir src="${app.dir}/loader" dest="${app.dir}/phonegap/www/loader"/>
        <copydir src="${app.dir}/libs" dest="${app.dir}/phonegap/www/libs"/>

        <echo file="${app.dir}/phonegap/www/loader/config.js"><![CDATA[
/*
 * This file is generated by build script and should NOT be edited.
 * See build.xml for more details.
 */

var criterion = criterion || {};
    criterion.locales = [],
    isLoginPage = (location.pathname.indexOf('auth.html') > -1),
    LOGIN_MODES = {// >0 (1) for native builds, 2 for GlobalLogin
        web : 0,
        mobile : 1,
        api : 2
    };

if(isLoginPage) {
    var cordova_js = document.createElement('script');
    cordova_js.src = 'cordova.js';
    document.head.appendChild(cordova_js);
}

function merge_objects(object1, object2) {
    var ret_object = {};
    for (var attrname in object1) {
        ret_object[attrname] = object1[attrname];
    }
    for (var attrname in object2) {
        ret_object[attrname] = object2[attrname];
    }
    return ret_object;
}

criterion = merge_objects(criterion, {
    PRODUCTION : true,
    AUTH_URL : '',
    AUTH : {},
    DIRECT_AUTH : LOGIN_MODES.mobile,
    appName : 'ess',
    support : {},
    buildAuthCfg : function() {
        criterion.AUTH = merge_objects(criterion.AUTH, {
            DIRECT_AUTH_LOGIN : criterion.AUTH_URL + '/direct/login',
            DIRECT_AUTH_INFO : criterion.AUTH_URL + '/direct/userInfo',
            DIRECT_AUTH_FORGOT : criterion.AUTH_URL + '/direct/forgot',
            DIRECT_AUTH_TENANT : criterion.AUTH_URL + '/direct/tenant',
            DIRECT_AUTH_2FA : criterion.AUTH_URL + '/direct/2fa',
            DIRECT_AUTH_SET_PASSWORD : criterion.AUTH_URL + '/direct/setPassword',
            DIRECT_AUTH_AZURE : criterion.AUTH_URL + '/external/auth/azure/mobile',
            GLOBAL_AUTH_INFO : criterion.AUTH_URL + '/userInfo',
            TENANT_STYLE : criterion.AUTH_URL + '/tenant/styles/',
            BIOMETRIC_LOGIN : criterion.AUTH_URL + '/direct/biometricLogin'
        });
    }
});

]]></echo>
    </target>

</project>
